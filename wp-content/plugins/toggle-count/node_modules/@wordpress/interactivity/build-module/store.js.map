{"version":3,"names":["proxifyState","proxifyStore","deepMerge","getNamespace","isPlainObject","stores","Map","rawStores","storeLocks","storeConfigs","serverStates","getConfig","namespace","get","getServerState","ns","has","set","readOnly","universalUnlock","store","state","block","lock","rawStore","proxifiedStore","storeLock","isLockValid","Error","target","parseServerData","dom","document","_dom$getElementById","jsonDataScriptTag","getElementById","textContent","JSON","parse","populateServerData","data","Object","entries","forEach","st","config"],"sources":["@wordpress/interactivity/src/store.ts"],"sourcesContent":["/**\n * Internal dependencies\n */\nimport { proxifyState, proxifyStore, deepMerge } from './proxies';\n/**\n * External dependencies\n */\nimport { getNamespace } from './namespaces';\nimport { isPlainObject } from './utils';\n\nexport const stores = new Map();\nconst rawStores = new Map();\nconst storeLocks = new Map();\nconst storeConfigs = new Map();\nconst serverStates = new Map();\n\n/**\n * Get the defined config for the store with the passed namespace.\n *\n * @param namespace Store's namespace from which to retrieve the config.\n * @return Defined config for the given namespace.\n */\nexport const getConfig = ( namespace?: string ) =>\n\tstoreConfigs.get( namespace || getNamespace() ) || {};\n\n/**\n * Get the part of the state defined and updated from the server.\n *\n * The object returned is read-only, and includes the state defined in PHP with\n * `wp_interactivity_state()`. When using `actions.navigate()`, this object is\n * updated to reflect the changes in its properties, without affecting the state\n * returned by `store()`. Directives can subscribe to those changes to update\n * the state if needed.\n *\n * @example\n * ```js\n *  const { state } = store('myStore', {\n *    callbacks: {\n *      updateServerState() {\n *        const serverState = getServerState();\n *        // Override some property with the new value that came from the server.\n *        state.overridableProp = serverState.overridableProp;\n *      },\n *    },\n *  });\n * ```\n *\n * @param namespace Store's namespace from which to retrieve the server state.\n * @return The server state for the given namespace.\n */\nexport const getServerState = ( namespace?: string ) => {\n\tconst ns = namespace || getNamespace();\n\tif ( ! serverStates.has( ns ) ) {\n\t\tserverStates.set( ns, proxifyState( ns, {}, { readOnly: true } ) );\n\t}\n\treturn serverStates.get( ns );\n};\n\ninterface StoreOptions {\n\t/**\n\t * Property to block/unblock private store namespaces.\n\t *\n\t * If the passed value is `true`, it blocks the given namespace, making it\n\t * accessible only trough the returned variables of the `store()` call. In\n\t * the case a lock string is passed, it also blocks the namespace, but can\n\t * be unblocked for other `store()` calls using the same lock string.\n\t *\n\t * @example\n\t * ```\n\t * // The store can only be accessed where the `state` const can.\n\t * const { state } = store( 'myblock/private', { ... }, { lock: true } );\n\t * ```\n\t *\n\t * @example\n\t * ```\n\t * // Other modules knowing `SECRET_LOCK_STRING` can access the namespace.\n\t * const { state } = store(\n\t *   'myblock/private',\n\t *   { ... },\n\t *   { lock: 'SECRET_LOCK_STRING' }\n\t * );\n\t * ```\n\t */\n\tlock?: boolean | string;\n}\n\ntype Prettify< T > = { [ K in keyof T ]: T[ K ] } & {};\ntype DeepPartial< T > = T extends object\n\t? { [ P in keyof T ]?: DeepPartial< T[ P ] > }\n\t: T;\ntype DeepPartialState< T extends { state: object } > = Omit< T, 'state' > & {\n\tstate?: DeepPartial< T[ 'state' ] >;\n};\ntype ConvertGeneratorToPromise< T > = T extends (\n\t...args: infer A\n) => Generator< any, infer R, any >\n\t? ( ...args: A ) => Promise< R >\n\t: never;\ntype ConvertGeneratorsToPromises< T > = {\n\t[ K in keyof T ]: T[ K ] extends ( ...args: any[] ) => any\n\t\t? ConvertGeneratorToPromise< T[ K ] > extends never\n\t\t\t? T[ K ]\n\t\t\t: ConvertGeneratorToPromise< T[ K ] >\n\t\t: T[ K ] extends object\n\t\t? Prettify< ConvertGeneratorsToPromises< T[ K ] > >\n\t\t: T[ K ];\n};\ntype ConvertPromiseToGenerator< T > = T extends (\n\t...args: infer A\n) => Promise< infer R >\n\t? ( ...args: A ) => Generator< any, R, any >\n\t: never;\ntype ConvertPromisesToGenerators< T > = {\n\t[ K in keyof T ]: T[ K ] extends ( ...args: any[] ) => any\n\t\t? ConvertPromiseToGenerator< T[ K ] > extends never\n\t\t\t? T[ K ]\n\t\t\t: ConvertPromiseToGenerator< T[ K ] >\n\t\t: T[ K ] extends object\n\t\t? Prettify< ConvertPromisesToGenerators< T[ K ] > >\n\t\t: T[ K ];\n};\n\nexport const universalUnlock =\n\t'I acknowledge that using a private store means my plugin will inevitably break on the next store release.';\n\n/**\n * Extends the Interactivity API global store adding the passed properties to\n * the given namespace. It also returns stable references to the namespace\n * content.\n *\n * These props typically consist of `state`, which is the reactive part of the\n * store ― which means that any directive referencing a state property will be\n * re-rendered anytime it changes ― and function properties like `actions` and\n * `callbacks`, mostly used for event handlers. These props can then be\n * referenced by any directive to make the HTML interactive.\n *\n * @example\n * ```js\n *  const { state } = store( 'counter', {\n *    state: {\n *      value: 0,\n *      get double() { return state.value * 2; },\n *    },\n *    actions: {\n *      increment() {\n *        state.value += 1;\n *      },\n *    },\n *  } );\n * ```\n *\n * The code from the example above allows blocks to subscribe and interact with\n * the store by using directives in the HTML, e.g.:\n *\n * ```html\n * <div data-wp-interactive=\"counter\">\n *   <button\n *     data-wp-text=\"state.double\"\n *     data-wp-on--click=\"actions.increment\"\n *   >\n *     0\n *   </button>\n * </div>\n * ```\n * @param namespace The store namespace to interact with.\n * @param storePart Properties to add to the store namespace.\n * @param options   Options for the given namespace.\n *\n * @return A reference to the namespace content.\n */\n\n// Overload for when the types are inferred.\nexport function store< T extends object >(\n\tnamespace: string,\n\tstorePart: T,\n\toptions?: StoreOptions\n): Prettify< ConvertGeneratorsToPromises< T > >;\n\n// Overload for when types are passed via generics and they contain state.\nexport function store< T extends { state: object } >(\n\tnamespace: string,\n\tstorePart: ConvertPromisesToGenerators< DeepPartialState< T > >,\n\toptions?: StoreOptions\n): Prettify< ConvertGeneratorsToPromises< T > >;\n\n// Overload for when types are passed via generics and they don't contain state.\nexport function store< T extends object >(\n\tnamespace: string,\n\tstorePart: ConvertPromisesToGenerators< T >,\n\toptions?: StoreOptions\n): Prettify< ConvertGeneratorsToPromises< T > >;\n\n// Overload for when types are divided into multiple parts.\nexport function store< T extends object >(\n\tnamespace: string,\n\tstorePart: ConvertPromisesToGenerators< DeepPartial< T > >,\n\toptions?: StoreOptions\n): Prettify< ConvertGeneratorsToPromises< T > >;\n\nexport function store(\n\tnamespace: string,\n\t{ state = {}, ...block }: any = {},\n\t{ lock = false }: StoreOptions = {}\n) {\n\tif ( ! stores.has( namespace ) ) {\n\t\t// Lock the store if the passed lock is different from the universal\n\t\t// unlock. Once the lock is set (either false, true, or a given string),\n\t\t// it cannot change.\n\t\tif ( lock !== universalUnlock ) {\n\t\t\tstoreLocks.set( namespace, lock );\n\t\t}\n\t\tconst rawStore = {\n\t\t\tstate: proxifyState(\n\t\t\t\tnamespace,\n\t\t\t\tisPlainObject( state ) ? state : {}\n\t\t\t),\n\t\t\t...block,\n\t\t};\n\t\tconst proxifiedStore = proxifyStore( namespace, rawStore );\n\t\trawStores.set( namespace, rawStore );\n\t\tstores.set( namespace, proxifiedStore );\n\t} else {\n\t\t// Lock the store if it wasn't locked yet and the passed lock is\n\t\t// different from the universal unlock. If no lock is given, the store\n\t\t// will be public and won't accept any lock from now on.\n\t\tif ( lock !== universalUnlock && ! storeLocks.has( namespace ) ) {\n\t\t\tstoreLocks.set( namespace, lock );\n\t\t} else {\n\t\t\tconst storeLock = storeLocks.get( namespace );\n\t\t\tconst isLockValid =\n\t\t\t\tlock === universalUnlock ||\n\t\t\t\t( lock !== true && lock === storeLock );\n\n\t\t\tif ( ! isLockValid ) {\n\t\t\t\tif ( ! storeLock ) {\n\t\t\t\t\tthrow Error( 'Cannot lock a public store' );\n\t\t\t\t} else {\n\t\t\t\t\tthrow Error(\n\t\t\t\t\t\t'Cannot unlock a private store with an invalid lock code'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst target = rawStores.get( namespace );\n\t\tdeepMerge( target, block );\n\t\tdeepMerge( target.state, state );\n\t}\n\n\treturn stores.get( namespace );\n}\n\nexport const parseServerData = ( dom = document ) => {\n\tconst jsonDataScriptTag =\n\t\t// Preferred Script Module data passing form\n\t\tdom.getElementById(\n\t\t\t'wp-script-module-data-@wordpress/interactivity'\n\t\t) ??\n\t\t// Legacy form\n\t\tdom.getElementById( 'wp-interactivity-data' );\n\tif ( jsonDataScriptTag?.textContent ) {\n\t\ttry {\n\t\t\treturn JSON.parse( jsonDataScriptTag.textContent );\n\t\t} catch {}\n\t}\n\treturn {};\n};\n\nexport const populateServerData = ( data?: {\n\tstate?: Record< string, unknown >;\n\tconfig?: Record< string, unknown >;\n} ) => {\n\tif ( isPlainObject( data?.state ) ) {\n\t\tObject.entries( data!.state ).forEach( ( [ namespace, state ] ) => {\n\t\t\tconst st = store< any >( namespace, {}, { lock: universalUnlock } );\n\t\t\tdeepMerge( st.state, state, false );\n\t\t\tdeepMerge( getServerState( namespace ), state );\n\t\t} );\n\t}\n\tif ( isPlainObject( data?.config ) ) {\n\t\tObject.entries( data!.config ).forEach( ( [ namespace, config ] ) => {\n\t\t\tstoreConfigs.set( namespace, config );\n\t\t} );\n\t}\n};\n\n// Parse and populate the initial state and config.\nconst data = parseServerData();\npopulateServerData( data );\n"],"mappings":"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","ignoreList":[]}